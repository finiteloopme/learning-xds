// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: math/v1alpha1/math.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathOperationClient is the client API for MathOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathOperationClient interface {
	GetSquareOf(ctx context.Context, in *GetSquareOfRequest, opts ...grpc.CallOption) (*GetSquareOfResponse, error)
	StreamSquareOf(ctx context.Context, opts ...grpc.CallOption) (MathOperation_StreamSquareOfClient, error)
}

type mathOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewMathOperationClient(cc grpc.ClientConnInterface) MathOperationClient {
	return &mathOperationClient{cc}
}

func (c *mathOperationClient) GetSquareOf(ctx context.Context, in *GetSquareOfRequest, opts ...grpc.CallOption) (*GetSquareOfResponse, error) {
	out := new(GetSquareOfResponse)
	err := c.cc.Invoke(ctx, "/math.v1alpha1.MathOperation/GetSquareOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathOperationClient) StreamSquareOf(ctx context.Context, opts ...grpc.CallOption) (MathOperation_StreamSquareOfClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathOperation_ServiceDesc.Streams[0], "/math.v1alpha1.MathOperation/StreamSquareOf", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathOperationStreamSquareOfClient{stream}
	return x, nil
}

type MathOperation_StreamSquareOfClient interface {
	Send(*StreamSquareOfRequest) error
	Recv() (*StreamSquareOfResponse, error)
	grpc.ClientStream
}

type mathOperationStreamSquareOfClient struct {
	grpc.ClientStream
}

func (x *mathOperationStreamSquareOfClient) Send(m *StreamSquareOfRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathOperationStreamSquareOfClient) Recv() (*StreamSquareOfResponse, error) {
	m := new(StreamSquareOfResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathOperationServer is the server API for MathOperation service.
// All implementations should embed UnimplementedMathOperationServer
// for forward compatibility
type MathOperationServer interface {
	GetSquareOf(context.Context, *GetSquareOfRequest) (*GetSquareOfResponse, error)
	StreamSquareOf(MathOperation_StreamSquareOfServer) error
}

// UnimplementedMathOperationServer should be embedded to have forward compatible implementations.
type UnimplementedMathOperationServer struct {
}

func (UnimplementedMathOperationServer) GetSquareOf(context.Context, *GetSquareOfRequest) (*GetSquareOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquareOf not implemented")
}
func (UnimplementedMathOperationServer) StreamSquareOf(MathOperation_StreamSquareOfServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSquareOf not implemented")
}

// UnsafeMathOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathOperationServer will
// result in compilation errors.
type UnsafeMathOperationServer interface {
	mustEmbedUnimplementedMathOperationServer()
}

func RegisterMathOperationServer(s grpc.ServiceRegistrar, srv MathOperationServer) {
	s.RegisterService(&MathOperation_ServiceDesc, srv)
}

func _MathOperation_GetSquareOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperationServer).GetSquareOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.v1alpha1.MathOperation/GetSquareOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperationServer).GetSquareOf(ctx, req.(*GetSquareOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathOperation_StreamSquareOf_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathOperationServer).StreamSquareOf(&mathOperationStreamSquareOfServer{stream})
}

type MathOperation_StreamSquareOfServer interface {
	Send(*StreamSquareOfResponse) error
	Recv() (*StreamSquareOfRequest, error)
	grpc.ServerStream
}

type mathOperationStreamSquareOfServer struct {
	grpc.ServerStream
}

func (x *mathOperationStreamSquareOfServer) Send(m *StreamSquareOfResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathOperationStreamSquareOfServer) Recv() (*StreamSquareOfRequest, error) {
	m := new(StreamSquareOfRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathOperation_ServiceDesc is the grpc.ServiceDesc for MathOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math.v1alpha1.MathOperation",
	HandlerType: (*MathOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSquareOf",
			Handler:    _MathOperation_GetSquareOf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSquareOf",
			Handler:       _MathOperation_StreamSquareOf_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "math/v1alpha1/math.proto",
}
